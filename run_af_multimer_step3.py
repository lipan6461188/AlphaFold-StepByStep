#!/usr/bin/env python
#-*- coding:utf-8 -*-
###############################################
#
#
#   Run AlphaFold-Multimer step by step
#   (https://github.com/deepmind/alphafold)
#   Author: Pan Li (lipan@shuimubio.com)
#                    @ Shuimu BioScience
#        https://www.shuimubio.com/
#
#
################################################

#
#
#  AlphaFold-Multimer Step 3 -- Relax models
#  Usage: run_af_multimer_step3.py /path/to/features.pkl /path/to/result_model.pkl /path/to/output.pdb
#
#

import json
import os
import pathlib
import pickle
import random
import shutil
import sys
import time
import gzip
from typing import Dict, Union, Optional
import numpy as np
import argparse
import configparser

os.environ['CUDA_VISIBLE_DEVICES'] = ''

cur_path = pathlib.Path(__file__).parent.resolve()

config = configparser.ConfigParser(allow_no_value=True)
assert len(config.read(os.path.join(cur_path, 'config.ini'))) > 0, "Read config.ini failed"

sys.path.insert(0, config['ALPHAFOLD2']['alphafold_path'])

from alphafold.common import protein
from alphafold.common import residue_constants
from alphafold.relax import relax

parser = argparse.ArgumentParser(description='AlphaFold-Multimer Step 3 -- Relax models')

parser.add_argument('features_pkl', metavar='features_pkl', type=str, help='The features.pkl file generated by AlphaFold-Multimer step 1.')
parser.add_argument('model_pkl', metavar='model_pkl', type=str, help='The result_model.pkl file generated by AlphaFold-Multimer step 2.')
parser.add_argument('output_pdb_file', metavar='output_pdb_file', type=str, help='The PDB file to save the relaxed models.')

args = parser.parse_args()

if os.path.exists(args.output_pdb_file):
    print(f"Info: {args.output_pdb_file} exists, please delete and try again")
    exit(0)

######################
## Read the input features
######################

if args.features_pkl.endswith('.gz'):
    feature_dict = pickle.load(gzip.open(args.features_pkl, 'rb'))
else:
    feature_dict = pickle.load(open(args.features_pkl, 'rb'))

if args.model_pkl.endswith('.gz'):
    prediction_result = pickle.load(gzip.open(args.model_pkl, 'rb'))
else:
    prediction_result = pickle.load(open(args.model_pkl, 'rb'))

######################
## Define the relaxer
######################

RELAX_MAX_ITERATIONS = 0
RELAX_ENERGY_TOLERANCE = 2.39
RELAX_STIFFNESS = 10.0
RELAX_EXCLUDE_RESIDUES = []
RELAX_MAX_OUTER_ITERATIONS = 3

amber_relaxer = relax.AmberRelaxation(
    max_iterations=RELAX_MAX_ITERATIONS,
    tolerance=RELAX_ENERGY_TOLERANCE,
    stiffness=RELAX_STIFFNESS,
    exclude_residues=RELAX_EXCLUDE_RESIDUES,
    max_outer_iterations=RELAX_MAX_OUTER_ITERATIONS)

######################
## Define Protein object
######################

plddt = prediction_result['plddt']
plddt_b_factors = np.repeat(plddt[:, None], residue_constants.atom_type_num, axis=-1)

unrelaxed_protein = protein.from_prediction(
    features=feature_dict,
    result=prediction_result,
    b_factors=plddt_b_factors,
    remove_leading_feature_dimension=False)

######################
## Start to relax
######################

print(f"Relax model {args.model_pkl}", flush=True)
relaxed_pdb_str, _, _ = amber_relaxer.process(prot=unrelaxed_protein)
print( relaxed_pdb_str, file=open(args.output_pdb_file, 'w') )


